#1. Data Initialization
 # ● Use a CSV file to store initial library data:
  #    ○ Fields: Book ID, Title, Author, Genre, Availability (Yes/No),
  #    Borrower (if any).
#  ●  Load the data into a Pandas DataFrame for processing.


import csv

library_data = {
    "Book ID": [1, 2, 3, 4, 5, 6],
    "Title": ["To Kill a Mockingbird", "1984", "The Great Gatsby", "Dune", "The Alchemist" , "Gone Girl"],
    "Author": ["Harper Lee", "George Orwell", "F. Scott Fitzgerald", "Frank Herbert", "Paulo Coelho","Gillian Flynn"],
    "Genre": ["Classic Fiction", "Dystopian Fiction", "Classic Romance/Drama", "Science Fiction", "	Inspirational Fiction","Thriller/Psychological Fiction"],
    "Availability": ["Yes", "No", "Yes", "Yes", "No", "Yes"],
    "Borrower": ["Sajib", None, "Sanjida", "Jabir", "Bithi", None]
}
csv_file = "library_data.csv"
with open(csv_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(library_data.keys())
    num_books = len(library_data["Book ID"])
    
    for i in range(num_books):
        min_len = min(len(library_data[key]) for key in library_data)
        
        if i < min_len:
          writer.writerow([
                library_data["Book ID"][i],
                library_data["Title"][i],
                library_data["Author"][i],
                library_data["Genre"][i],
                library_data["Availability"][i],
                library_data["Borrower"][i]
            ])
print(f"Library data has been saved to {csv_file}.")


import pandas as pd

csv_file = "library_data.csv"

df = pd.read_csv(csv_file)

print("Library Data:")
print(df)
df


#2. Book Management
#● Allow the librarian to:
#○ Add new books to the inventory.
#○ Remove books by their ID.
#○ Update book details (e.g., availability, borrower).

import pandas as pd

csv_file = "library_data.csv"
df = pd.read_csv(csv_file)

def save_to_csv():
    """Save the DataFrame back to the CSV file."""
    df.to_csv(csv_file, index=False)
    print("Changes have been saved to the CSV file.")

def add_book():
    """Add a new book to the inventory."""
    global df
    
    try:
        book_id = int(input("Enter Book ID: "))
        title = input("Enter Book Title: ")
        author = input("Enter Author Name: ")
        genre = input("Enter Genre: ")
        availability = input("Is the book available? (Yes/No): ").lower()
        borrower = input("Enter Borrower (or leave empty): ")
        borrower = borrower if borrower else None

        new_book = {
            "Book ID": book_id,
            "Title": title,
            "Author": author,
            "Genre": genre,
            "Availability": availability,
            "Borrower": borrower
        }

        df = pd.concat([df, pd.DataFrame([new_book])], ignore_index=True)
        print(f"Book '{title}' has been added to the inventory.")
        save_to_csv()
    except ValueError:
        print("Invalid input. Please enter a valid integer for Book ID.")

def remove_book():
    """Remove a book by its ID."""
    global df
    
    try:
        book_id = int(input("Enter the Book ID to remove: "))
        df = df[df["Book ID"] != book_id]
        print(f"Book with ID {book_id} has been removed.")
        save_to_csv()
    except ValueError:
        print("Invalid input. Please enter a valid integer for Book ID.")

def update_book():
    """Update book details."""
    global df
    
    try:
        book_id = int(input("Enter the Book ID to update: "))
        
        if book_id not in df["Book ID"].values:
            print(f"No book found with this ID {book_id}.")
            return

        print("What would you like to update?")
        print("1. Availability")
        print("2. Borrower")
        choice = int(input("Enter your choice: "))

        if choice == 1:
            availability = input("Enter new availability status (Yes/No): ").lower()
            df.loc[df["Book ID"] == book_id, "Availability"] = availability
            print(f"Availability of book ID {book_id} has been updated.")
        elif choice == 2:
            borrower = input("Enter new borrower (or leave empty): ")
            borrower = borrower if borrower else None
            df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
            print(f"Borrower of book ID {book_id} has been updated.")
        else:
            print("Invalid choice.")
        save_to_csv()
    except ValueError:
        print("Invalid input. Please enter a valid integer for Book ID.")

while True:
    print("\n--- Library Management ---")
    print("1. Add Book")
    print("2. Remove Book")
    print("3. Update Book")
    print("4. View Inventory")
    print("5. Exit")

    try:
        choice = int(input("Enter your choice: "))
        
        if choice == 1:
            add_book()
        elif choice == 2:
            remove_book()
        elif choice == 3:
            update_book()
        elif choice == 4:
            print(df)
        elif choice == 5:
            print("Exiting Library Management System.")
            break
        else:
            print("Invalid choice. Please try again.")
    except ValueError:
        print("Invalid input. Please enter a valid integer choice.")


#3. Borrowing and Returning Books
#● Implement logic for:
#○ Borrowing a Book:
#■ Check if the book is available.
#■ Update the borrower details and availability status.
#○ Returning a Book:
#■ Mark the book as available and clear the borrower details

import pandas as pd

csv_file = "library_data.csv"
df = pd.read_csv(csv_file)

def save_to_csv():
    """Save the DataFrame back to the CSV file."""
    df.to_csv(csv_file, index=False)
    print("Changes have been saved to the CSV file.")

def borrow_book():
    """Borrow a book."""
    global df
    
    try:
        book_id = int(input("Enter the Book ID to borrow: "))
        
        if book_id not in df["Book ID"].values:
            print(f"No book found with ID {book_id}.")
            return

        book_row = df.loc[df["Book ID"] == book_id]
        availability = book_row["Availability"].values[0]

        if availability == "Yes":
            borrower = input("Enter the borrower's name: ")
            df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
            df.loc[df["Book ID"] == book_id, "Availability"] = "No"
            print(f"Book ID {book_id} has been borrowed by {borrower}.")
            save_to_csv()
        else:
            print(f"Book ID {book_id} is currently unavailable.")
    except ValueError:
        print("Invalid input. Please enter a valid integer for Book ID.")

def return_book():
    """Return a book."""
    global df
    
    try:
        book_id = int(input("Enter the Book ID to return: "))
        
        if book_id not in df["Book ID"].values:
            print(f"No book found with ID {book_id}.")
            return

        book_row = df.loc[df["Book ID"] == book_id]
        availability = book_row["Availability"].values[0]

        if availability == "No":
            df.loc[df["Book ID"] == book_id, "Borrower"] = None
            df.loc[df["Book ID"] == book_id, "Availability"] = "Yes"
            print(f"Book ID {book_id} has been returned and marked as available.")
            save_to_csv()
        else:
            print(f"Book ID {book_id} is already marked as available.")
    except ValueError:
        print("Invalid input. Please enter a valid integer for Book ID.")

while True:
    print("\n--- Borrowing and Returning Books ---")
    print("1. Borrow a Book")
    print("2. Return a Book")
    print("3. View Inventory")
    print("4. Exit")

    try:
        choice = int(input("Enter your choice: "))
        
        if choice == 1:
            borrow_book()
        elif choice == 2:
            return_book()
        elif choice == 3:
            print(df)
        elif choice == 4:
            print("Exiting Borrowing and Returning System.")
            break
        else:
            print("Invalid choice. Please try again.")
    except ValueError:
        print("Invalid input. Please enter a valid integer choice.")


#4. Search and Filter Features
#● Allow users to search for books:
#○ By title, author, or genre using Boolean Indexing.
#● Provide filtering options to:
#○ Show only available books.
#○ List books borrowed by a specific user.

import pandas as pd

csv_file = "library_data.csv"
df = pd.read_csv(csv_file)

def save_to_csv():
    """Save the DataFrame back to the CSV file."""
    df.to_csv(csv_file, index=False)
    print("Changes have been saved to the CSV file.")

def search_books():
    """Search for books by title, author, or genre."""
    print("\nSearch by:")
    print("1. Title")
    print("2. Author")
    print("3. Genre")
    choice = int(input("Enter your choice: "))

    query = input("Enter your search term: ").strip().lower()

    try:
        if choice == 1:
            results = df[df["Title"].str.lower().str.contains(query, na=False)]
        elif choice == 2:
            results = df[df["Author"].str.lower().str.contains(query, na=False)]
        elif choice == 3:
            results = df[df["Genre"].str.lower().str.contains(query, na=False)]
        else:
            print("Invalid choice. Returning to menu.")
            return

        if not results.empty:
            print("\nSearch Results:")
            print(results)
        else:
            print("No book found matching to your search.")
    except ValueError:
        print("Invalid input. Please enter a valid integer choice.")

def filter_books():
    """Filter books based on availability or borrower."""
    print("\nFilter by:")
    print("1. Show only available books")
    print("2. List books borrowed by a specific user")
    choice = int(input("Enter your choice: "))

    try:
        if choice == 1:
            available_books = df[df["Availability"] == "Yes"]
            print("\nAvailable Books:")
            print(available_books)
        elif choice == 2:
            borrower = input("Enter the borrower's name: ").strip().lower()
            borrowed_books = df[df["Borrower"].str.lower().fillna("").str.contains(borrower, na=False)]

            if not borrowed_books.empty:
                print(f"\nBooks borrowed by {borrower.capitalize()}:")
                print(borrowed_books)
            else:
                print(f"No books found borrowed by {borrower.capitalize()}.")
        else:
            print("Invalid choice. Returning to menu.")
    except ValueError:
        print("Invalid input. Please enter a valid integer choice.")

# Menu for testing the functionality
while True:
    print("\n--- Search and Filter Features ---")
    print("1. Search for Books")
    print("2. Filter Books")
    print("3. View Inventory")
    print("4. Exit")

    try:
        choice = int(input("Enter your choice: "))

        if choice == 1:
            search_books()
        elif choice == 2:
            filter_books()
        elif choice == 3:
            print(df)
        elif choice == 4:
            print("Exiting Search and Filter System.")
            break
        else:
            print("Invalid choice. Please try again.")
    except ValueError:
        print("Invalid input. Please enter a valid integer choice.")

#5. Advanced Features (Optional for Bonus Marks)
#● Exception Handling:
#○ Handle invalid book IDs or missing entries gracefully.
#● Regular Expressions (RegEx):
#○ Validate user input for book IDs (e.g., BK-001 format).
#● Data Visualization:
#○ Display a bar chart showing the number of books in each genre.
#○ Generate a pie chart of availability status (Available vs Borrowed).

import pandas as pd
import re
import matplotlib.pyplot as plt


class Library:
    """
    This class represents a library management system with functionalities
    for managing books, validation, and visualization.
    """

    def __init__(self, csv_file):
        self.df = pd.read_csv(csv_file)
        self.csv_file = csv_file

    def validate_book_id(self, book_id):
        """
        Validates book ID format (e.g., BK-001).
        """
        return bool(re.match(r"^BK-\d{3}$", book_id))

    def add_book(self):
        """
        Adds a new book with validated book ID.
        """
        book_id = input("Enter Book ID (format BK-001): ").strip()
        if not self.validate_book_id(book_id):
            print("Invalid Book ID format. Please use format BK-001.")
            return

        if book_id in self.df["Book ID"].values:
            print("Book ID already exists. Please enter a unique ID.")
            return

        title = input("Enter Book Title: ")
        author = input("Enter Author Name: ")
        genre = input("Enter Genre: ")
        availability = input("Is the book available? (Yes/No): ")
        borrower = input("Enter Borrower (or leave empty): ")
        borrower = borrower if borrower else None

        new_book = {
            "Book ID": book_id,
            "Title": title,
            "Author": author,
            "Genre": genre,
            "Availability": availability,
            "Borrower": borrower,
        }

        self.df = pd.concat([self.df, pd.DataFrame([new_book])], ignore_index=True)
        print(f"Book '{title}' has been added to the inventory.")
        self.save_to_csv()

    def check_book_id(self, book_id):
        """
        Checks if a book ID exists.
        """
        if book_id not in self.df["Book ID"].values:
            print(f"No book found with ID {book_id}. Please try again.")
            return False
        return True

    def save_to_csv(self):
        """
        Saves the DataFrame back to the CSV file.
        """
        self.df.to_csv(self.csv_file, index=False)
        print("Changes have been saved to the CSV file.")

    def display_genre_chart(self):
        """
        Displays a bar chart of the number of books in each genre.
        """
        genre_counts = self.df["Genre"].value_counts()
        genre_counts.plot(kind="bar", color="skyblue", title="Number of Books by Genre")
        plt.xlabel("Genre")
        plt.ylabel("Number of Books")
        plt.show()

    def display_availability_pie_chart(self):
        """
        Displays a pie chart of book availability.
        """
        availability_counts = self.df["Availability"].value_counts()
        availability_counts.plot(
            kind="pie", autopct="%1.1f%%", startangle=90, colors=["green", "red"]
        )
        plt.title("Availability Status (Available vs Borrowed)")
        plt.ylabel("")  
        plt.show()

library = Library("library_data.csv")

while True:
    print("\n--- Advanced Features ---")
    print("1. Add Book with Validation")
    print("2. Check Book ID Validity")
    print("3. Display Genre Bar Chart")
    print("4. Display Availability Pie Chart")
    print("5. Exit")

    choice = int(input("Enter your choice: "))
    if choice == 1:
        add_book_with_validation()
    elif choice == 2:
        book_id = input("Enter Book ID to validate: ")
        if validate_book_id(book_id):
            print("Valid Book ID.")
        else:
            print("Invalid Book ID format.")
    elif choice == 3:
        display_genre_chart()
    elif choice == 4:
        display_availability_pie_chart()
    elif choice == 5:
        print("Exiting Advanced Features.")
        break
    else:
        print("Invalid choice. Please try again.")

#6. Statistics Using NumPy
#● Use NumPy to:
#○ Calculate the total number of books in the library.
#○ Identify the most borrowed genre.
#○ Analyze borrowing trends (e.g., average borrowing duration).


import pandas as pd
import numpy as np

csv_file = "library_data.csv"
df = pd.read_csv(csv_file)

def total_books():
    """Calculate the total number of books in the library."""
    total = np.size(df["Book ID"])
    print(f"Total number of books in the library: {total}")

def most_borrowed_genre():
    """Identify the most borrowed genre."""
    borrowed_books = df[df["Borrower"].notnull()]
    genre_counts = borrowed_books["Genre"].value_counts()
    if not genre_counts.empty:
        most_borrowed = genre_counts.idxmax()
        print(f"The most borrowed genre is: {most_borrowed}")
    else:
        print("No books have been borrowed yet.")

def average_borrowing_duration():
    """
    Analyze borrowing trends (average borrowing duration).
    Assuming the dataset has a column 'Borrowing Duration' in days.
    """
    if "Borrowing Duration" in df.columns:
        durations = df["Borrowing Duration"].dropna().values
        avg_duration = np.mean(durations)
        print(f"The average borrowing duration is: {avg_duration:.2f} days")
    else:
        print("The dataset does not include borrowing duration data.")


while True:
    print("\n--- Library Statistics Using NumPy ---")
    print("1. Total Number of Books")
    print("2. Most Borrowed Genre")
    print("3. Average Borrowing Duration")
    print("4. Exit")

    choice = int(input("Enter your choice: "))
    if choice == 1:
        total_books()
    elif choice == 2:
        most_borrowed_genre()
    elif choice == 3:
        average_borrowing_duration()
    elif choice == 4:
        print("Exiting Library Statistics System.")
        break
    else:
        print("Invalid choice. Please try again.")

#7. Interactive Console Interface
#● Create a menu-driven interface with options like:
#○ View all books.
#○ Add, remove, or update a book.
#○ Borrow or return a book.
#○ Search for a book.
#○ View statistics and visualizations.



import pandas as pd
import numpy as np
import re


csv_file = "library_data.csv"
df = pd.read_csv(csv_file)

def view_books():
    """Display all books in the library."""
    print("\n--- All Books in the Library ---")
    print(df)


def validate_book_id(book_id):
    """Validate book ID format (e.g., BK-001)."""
    return bool(re.match(r"^BK-\d{3}$", book_id))


def add_book():
    """Add a new book to the library."""
    book_id = input("Enter Book ID (format BK-001): ").strip()
    if not validate_book_id(book_id):
        print("Invalid Book ID format. Please use format BK-001.")
        return

    if book_id in df["Book ID"].values:
        print("Book ID already exists. Please enter a unique ID.")
        return

    title = input("Enter Book Title: ")
    author = input("Enter Author Name: ")
    genre = input("Enter Genre: ")
    availability = input("Is the book available? (Yes/No): ")
    borrower = input("Enter Borrower (or leave empty): ")
    borrower = borrower if borrower else None

    new_book = {
        "Book ID": book_id,
        "Title": title,
        "Author": author,
        "Genre": genre,
        "Availability": availability,
        "Borrower": borrower
    }
    df = pd.concat([df, pd.DataFrame([new_book])], ignore_index=True)
    print(f"Book '{title}' has been added to the library.")
    save_to_csv()


def remove_book():
    """Remove a book by its ID."""
    book_id = input("Enter Book ID to remove: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return


    df.drop(df[df["Book ID"] == book_id].index, inplace=True)
    print(f"Book with ID {book_id} has been removed.")
    save_to_csv()


def update_book():
    """Update a book's details."""
    book_id = input("Enter Book ID to update: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    availability = input("Enter new Availability (Yes/No): ")
    borrower = input("Enter new Borrower (or leave empty): ")
    borrower = borrower if borrower else None

    df.loc[df["Book ID"] == book_id, "Availability"] = availability
    df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
    print(f"Book with ID {book_id} has been updated.")
    save_to_csv()


def borrow_book():
    """Allow a user to borrow a book."""
    book_id = input("Enter Book ID to borrow: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    if df.loc[df["Book ID"] == book_id, "Availability"].values[0] == "No":
        print(f"Book with ID {book_id} is already borrowed.")
        return

    borrower = input("Enter your name: ").strip()
    df.loc[df["Book ID"] == book_id, "Availability"] = "No"
    df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
    print(f"Book with ID {book_id} has been borrowed by {borrower}.")
    save_to_csv()


def return_book():
    """Allow a user to return a borrowed book."""
    book_id = input("Enter Book ID to return: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    if df.loc[df["Book ID"] == book_id, "Availability"].values[0] == "Yes":
        print(f"Book with ID {book_id} is not borrowed.")
        return

    df.loc[df["Book ID"] == book_id, "Availability"] = "Yes"
    df.loc[df["Book ID"] == book_id, "Borrower"] = None
    print(f"Book with ID {book_id} has been returned.")
    save_to_csv()


def search_books():
    """Search for books by title, author, or genre."""
    print("\nSearch by:")
    print("1. Title")
    print("2. Author")
    print("3. Genre")
    choice = int(input("Enter your choice: "))

    query = input("Enter your search term: ").strip().lower()

    if choice == 1:
        results = df[df["Title"].str.lower().str.contains(query, na=False)]
    elif choice == 2:
        results = df[df["Author"].str.lower().str.contains(query, na=False)]
    elif choice == 3:
        results = df[df["Genre"].str.lower().str.contains(query, na=False)]
    else:
        print("Invalid choice. Returning to menu.")
        return

    if not results.empty:
        print("\nSearch Results:")
        print(results)
    else:
        print("No books found matching your search.")


def save_to_csv():
    """Save the DataFrame back to the CSV file."""
    df.to_csv(csv_file, index=False)

def show_statistics():
    """Show library statistics."""
    print("\n--- Library Statistics ---")
    total_books = len(df)
    print(f"Total number of books: {total_books}")


    borrowed_books = df[df["Availability"] == "No"]
    if not borrowed_books.empty:
        most_borrowed_genre = borrowed_books["Genre"].value_counts().idxmax()
        print(f"Most borrowed genre: {most_borrowed_genre}")
    else:
        print("No books are currently borrowed.")

    genre_counts = df["Genre"].value_counts()
    print("\nBooks by Genre:")
    for genre, count in genre_counts.items():
        print(f"  {genre}: {count}")


    availability_counts = df["Availability"].value_counts()
    print("\nAvailability Status:")
    for status, count in availability_counts.items():
        print(f"  {status}: {count}")


while True:
    print("\n--- Library Management System ---")
    print("1. View All Books")
    print("2. Add, Remove, or Update a Book")
    print("3. Borrow or Return a Book")
    print("4. Search for a Book")
    print("5. View Statistics")
    print("6. Exit")

    choice = int(input("Enter your choice: "))
    if choice == 1:
        view_books()
    elif choice == 2:
        print("\nAdd, Remove, or Update Book:")
        print("1. Add Book")
        print("2. Remove Book")
        print("3. Update Book")
        sub_choice = int(input("Enter your choice: "))
        if sub_choice == 1:
            add_book()
        elif sub_choice == 2:
            remove_book()
        elif sub_choice == 3:
            update_book()
        else:
            print("Invalid choice.")
    elif choice == 3:
        print("\nBorrow or Return Book:")
        print("1. Borrow Book")
        print("2. Return Book")
        sub_choice = int(input("Enter your choice: "))
        if sub_choice == 1:
            borrow_book()
        elif sub_choice == 2:
            return_book()
        else:
            print("Invalid choice.")
    elif choice == 4:
        search_books()
    elif choice == 5:
        show_statistics()
    elif choice == 6:
        print("Exiting Library Management System.")
        break
    else:
        print("Invalid choice. Please try again.")

#8. File Handling
#● Save changes made to the library inventory back to the CSV file after each operation.
#● Allow exporting filtered or searched data to a new CSV file.






import pandas as pd
import numpy as np
import re


csv_file = "library_data.csv"
df = pd.read_csv(csv_file)


def save_to_csv():
    """Save the DataFrame back to the CSV file after any update."""
    df.to_csv(csv_file, index=False)
    print("Changes have been saved to the CSV file.")

def export_to_csv(filtered_data, filename="filtered_books.csv"):
    """Export filtered or searched data to a new CSV file."""
    filtered_data.to_csv(filename, index=False)
    print(f"Filtered data has been exported to {filename}.")


def view_books():
    """Display all books in the library."""
    print("\n--- All Books in the Library ---")
    print(df)


def validate_book_id(book_id):
    """Validate book ID format (e.g., BK-001)."""
    return bool(re.match(r"^BK-\d{3}$", book_id))


def add_book():
    """Add a new book to the library."""
    book_id = input("Enter Book ID (format BK-001): ").strip()
    if not validate_book_id(book_id):
        print("Invalid Book ID format. Please use format BK-001.")
        return

    if book_id in df["Book ID"].values:
        print("Book ID already exists. Please enter a unique ID.")
        return

    title = input("Enter Book Title: ")
    author = input("Enter Author Name: ")
    genre = input("Enter Genre: ")
    availability = input("Is the book available? (Yes/No): ")
    borrower = input("Enter Borrower (or leave empty): ")
    borrower = borrower if borrower else None

    new_book = {
        "Book ID": book_id,
        "Title": title,
        "Author": author,
        "Genre": genre,
        "Availability": availability,
        "Borrower": borrower
    }

    df = pd.concat([df, pd.DataFrame([new_book])], ignore_index=True)
    print(f"Book '{title}' has been added to the library.")
    save_to_csv()


def remove_book():
    """Remove a book by its ID."""
    book_id = input("Enter Book ID to remove: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    df = df[df["Book ID"] != book_id]
    print(f"Book with ID {book_id} has been removed.")
    save_to_csv()


def update_book():
    """Update a book's details."""
    book_id = input("Enter Book ID to update: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return


    availability = input("Enter new Availability (Yes/No): ")
    borrower = input("Enter new Borrower (or leave empty): ")
    borrower = borrower if borrower else None

    df.loc[df["Book ID"] == book_id, "Availability"] = availability
    df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
    print(f"Book with ID {book_id} has been updated.")
    save_to_csv()

def borrow_book():
    """Allow a user to borrow a book."""
    book_id = input("Enter Book ID to borrow: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    if df.loc[df["Book ID"] == book_id, "Availability"].values[0] == "No":
        print(f"Book with ID {book_id} is already borrowed.")
        return

    borrower = input("Enter your name: ").strip()

    df.loc[df["Book ID"] == book_id, "Availability"] = "No"
    df.loc[df["Book ID"] == book_id, "Borrower"] = borrower
    print(f"Book with ID {book_id} has been borrowed by {borrower}.")
    save_to_csv()


def return_book():
    """Allow a user to return a borrowed book."""
    book_id = input("Enter Book ID to return: ").strip()
    if book_id not in df["Book ID"].values:
        print(f"No book found with ID {book_id}. Please try again.")
        return

    if df.loc[df["Book ID"] == book_id, "Availability"].values[0] == "Yes":
        print(f"Book with ID {book_id} is not borrowed.")
        return

    df.loc[df["Book ID"] == book_id, "Availability"] = "Yes"
    df.loc[df["Book ID"] == book_id, "Borrower"] = None
    print(f"Book with ID {book_id} has been returned.")
    save_to_csv()


def search_books():
    """Search for books by title, author, or genre."""
    print("\nSearch by:")
    print("1. Title")
    print("2. Author")
    print("3. Genre")
    choice = int(input("Enter your choice: "))

    query = input("Enter your search term: ").strip().lower()

    if choice == 1:
        results = df[df["Title"].str.lower().str.contains(query, na=False)]
    elif choice == 2:
        results = df[df["Author"].str.lower().str.contains(query, na=False)]
    elif choice == 3:
        results = df[df["Genre"].str.lower().str.contains(query, na=False)]
    else:
        print("Invalid choice. Returning to menu.")
        return

    if not results.empty:
        print("\nSearch Results:")
        print(results)
        export_choice = input("Would you like to export these results to a CSV file? (Yes/No): ").strip().lower()
        if export_choice == "yes":
            filename = input("Enter the filename (e.g., search_results.csv): ").strip()
            export_to_csv(results, filename)
    else:
        print("No books found matching your search.")

while True:
    print("\n--- Library Management System ---")
    print("1. View All Books")
    print("2. Add, Remove, or Update a Book")
    print("3. Borrow or Return a Book")
    print("4. Search for a Book")
    print("5. Exit")

    choice = int(input("Enter your choice: "))
    if choice == 1:
        view_books()
    elif choice == 2:
        print("\nAdd, Remove, or Update Book:")
        print("1. Add Book")
        print("2. Remove Book")
        print("3. Update Book")
        sub_choice = int(input("Enter your choice: "))
        if sub_choice == 1:
            add_book()
        elif sub_choice == 2:
            remove_book()
        elif sub_choice == 3:
            update_book()
        else:
            print("Invalid choice.")
    elif choice == 3:
        print("\nBorrow or Return Book:")
        print("1. Borrow Book")
        print("2. Return Book")
        sub_choice = int(input("Enter your choice: "))
        if sub_choice == 1:
            borrow_book()
        elif sub_choice == 2:
            return_book()
        else:
            print("Invalid choice.")
    elif choice == 4:
        search_books()
    elif choice == 5:
        print("Exiting Library Management System.")
        break
    else:
        print("Invalid choice. Please try again.")

